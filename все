using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

try
{
    var user = (from x in db.Users
                where x.login == TextBox1.Text
                select x).ToArray();
    if (TextBox1.Text.Length == 0 || TextBox2.Text.Length == 0)
    {
        MessageBox.Show("Поля Логин и Пароль обязательны для заполнения",
        "!", MessageBoxButton.OK, MessageBoxImage.Error);
    }
    else
    {
        if (TextBox1.Text == user[0].login)
        {
            if (TextBox2.Text == user[0].password)
            {
                if (user[0].date != null)
                {
                    // вычисляем количество дней, прошедших после последнего входа пользователя
                     DateTime d1 = DateTime.Now;
                    DateTime d2 = Convert.ToDateTime(user[0].date);
                    TimeSpan d = d1 - d2;
                    // если прошло более 30 дней, блокируем запись
                    if (Convert.ToInt32(d.ToString("dd")) > 30)
                    {
                        user[0].active = false;
                        db.SaveChanges();
                    }
                }
                if (user[0].active == true)
                {
                    switch (user[0].role2)
                    {
                        case 1:
                            MessageBox.Show("Добро пожаловать. Вы успешно авторизировались как администратор " + user[0].surname, "Уведомление", MessageBoxButton.OK,
                           MessageBoxImage.Information);
                            Window1 window = new Window1();
                            window.Show();
                            break;
                        case 4:
                            if (user[0].date == null)
                            {
                                usID = user[0].ID;
                                MessageBox.Show("Добро пожаловать. При первом входе в систему необходимо изменить пароль" ,
                                "Уведомление", MessageBoxButton.OK,
                                MessageBoxImage.Information);
                                UpdatePass window3 = new UpdatePass(usID);
                                window3.Show();
                            }
                            else
                            {
                                MessageBox.Show("Добро пожаловать. Вы успешно авторизировались как пользователь " + user[0].surname, "Уведомление", MessageBoxButton.OK,
                               MessageBoxImage.Information);
                                Window2 window1 = new Window2();
                                window1.Show();
                            }
                            break;
                        default:
                            MessageBox.Show("Данные не обнаружены", "Уведомление",
                           MessageBoxButton.OK, MessageBoxImage.Information);
                            break;
                    }
                    user[0].date = DateTime.Now;
                    user[0].count = 0;
                    db.SaveChanges();
                }
                else
                {
                    MessageBox.Show("Вы заблокированы. Обратитесь к администратору системы.", "Уведомление", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            else
            {
                if (user[0].count > 2)
                {
                    user[0].active = false;
                    db.SaveChanges();
                    MessageBox.Show("Вы заблокированы. Обратитесь к администратору системы.",
                    "Уведомление", MessageBoxButton.OK,
                    MessageBoxImage.Information);
                }
                else
                {
                    MessageBox.Show("Вы ввели неверный логин или пароль",
                   "Пожалуйста проверьте ещё раз введенные данные",
                    MessageBoxButton.OK, MessageBoxImage.Error);
                    user[0].count++;
                    db.SaveChanges();
                }
            }
        }
    }
}
catch (SystemException)
{
    MessageBox.Show("Ошибка системы", "Ошибка", MessageBoxButton.OK,
   MessageBoxImage.Error);
}

user User = new user();
var user2 = (from u in bd.user where u.login == TextBox1.Text select u).ToArray();
// проверяем наличие пользователя
if (user2.Length == 0)
{
    // записываем данные из полей в таблицу бд
    Users1.login = TextBox1.Text;
    Users1.password = TextBox2.Text;
    Users1.role2 = (typeRole.SelectedItem as Role).ID;
    Users1.surname = TextBox3.Text;
    Users1.name = TextBox4.Text;
    Users1.othcestvo = TextBox5.Text;
    Users1.count = 0;
    Users1.active = true;
    Users1.date = null;
    db.Users.Add(Users1);
    db.SaveChanges();
    // обновление таблицы для вывода из базы
    var user1 = (from u in db.Users select u).ToArray();
    GridUser.ItemsSource = user1;
    MessageBox.Show("Данные успешно добавлены", "Уведомление", MessageBoxButton.OK, MessageBoxImage.Information);

}
else
{
    MessageBox.Show("Такой пользователь уже существует",
    "!", MessageBoxButton.OK, MessageBoxImage.Error);
}
db.SaveChanges(); 

InitializeComponent();
var rol1 = (from x in db.Role select x).ToArray();
typeRole.DisplayMemberPath = "role1";
typeRole.SelectedValuePath = "ID";
typeRole.ItemsSource = rol1;
db.Users.Load();
typeRole.ItemsSource = db.Users.Local.ToBindingList();
var user1 = (from u in db.Users select u).ToArray();
GridUser.ItemsSource = user1;

<Label x:Name="Label1" Content="Добавление пользователей. Изменение данных пользователей." HorizontalAlignment="Left" Height="30" Margin="48,6,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label2" Content="Имя нового пользователя" HorizontalAlignment="Left" Height="40" Margin="48,46,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label3" Content="Введите пароль" HorizontalAlignment="Left" Height="30" Margin="48,90,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label4" Content="Выберите роль пользователя" HorizontalAlignment="Left" Height="30" Margin="48,135,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label5" Content="Фамилия" HorizontalAlignment="Left" Height="30" Margin="48,180,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label6" Content="Имя" HorizontalAlignment="Left" Height="30" Margin="300,180,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label7" Content="Отчество" HorizontalAlignment="Left" Height="30" Margin="500,180,0,0" VerticalAlignment="Top"></Label>
<TextBox x:Name="TextBox1"  HorizontalAlignment="Left" Height="33" Width="250" Margin="248,46,0,0" TextWrapping="Wrap" VerticalAlignment="Top"></TextBox>
<TextBox x:Name="TextBox2" HorizontalAlignment="Left" Height="33" Width="250" Margin="248,90,0,0" TextWrapping="Wrap" VerticalAlignment="Top"></TextBox>
<TextBox x:Name="TextBox3" HorizontalAlignment="Left" Height="33" Width="150" Margin="120,180,0,0" TextWrapping="Wrap" VerticalAlignment="Top"></TextBox>
<TextBox x:Name="TextBox4" HorizontalAlignment="Left" Height="33" Width="150" Margin="340,180,0,0" TextWrapping="Wrap" VerticalAlignment="Top"></TextBox>
<TextBox x:Name="TextBox5" HorizontalAlignment="Left" Height="33" Width="150" Margin="570,180,0,0" TextWrapping="Wrap" VerticalAlignment="Top"></TextBox>
<ComboBox x:Name="typeRole" FontSize="14" HorizontalAlignment="Left" Height="33" Width="250" VerticalAlignment="Top" Margin="248,135,0,0" ></ComboBox>
<Button x:Name="button3" Content="Добавить" HorizontalAlignment="Left" Height="30" Width="90" Margin="550,90,0,0" VerticalAlignment="Top" Click="button3_Click" ></Button>
<Button x:Name="button4" Content="Сохранить изменения" HorizontalAlignment="Left" Height="30" Width="130" Margin="550,140,0,0" VerticalAlignment="Top" Click="button4_Click" ></Button>
<StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Top">
    <DataGrid x:Name="GridUser" AutoGenerateColumns="False" Height="190" MaxWidth="750" ScrollViewer.CanContentScroll="True" Margin="5,230,5,5">
        <DataGrid.Columns>
            <DataGridTextColumn Header="ID" Width="*" Binding="{Binding IDUser}"/>
            <DataGridTextColumn Header="Фамилия" Width="*" Binding="{Binding MiddleName}"/>
            <DataGridTextColumn Header="Имя" Width="*" Binding="{Binding Name}"/>
            <DataGridTextColumn Header="Отчество" Width="*" Binding="{Binding LastName}"/>
            <DataGridTextColumn Header="Роль" Width="*" Binding="{Binding IDPole}"/>
            <DataGridTextColumn Header="Логин" Width="*" Binding="{Binding Login}"/>
            <DataGridTextColumn Header="Пароль" Width="*" Binding="{Binding Password}"/>
            <DataGridTextColumn Header="Кол-во вводов" Width="*" Binding="{Binding Count}"/>
            <DataGridTextColumn Header="Активность" Width="*" Binding="{Binding Active}"/>
            <DataGridTextColumn Header="Дата входа" Width="*" Binding="{Binding Date}"/>
        </DataGrid.Columns>
    </DataGrid>
</StackPanel>

<Label x:Name="Label1" Content="Вы успешно авторизировались. Пожалуйста, измените пароль" HorizontalAlignment="Center" Height="40" Margin="100,16,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label2" Content="Старый пароль" HorizontalAlignment="Left" Height="40" Margin="148,46,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label3" Content="Новый пароль" HorizontalAlignment="Left" Height="43" Margin="148,150,0,0" VerticalAlignment="Top"></Label>
<Label x:Name="Label4" Content="Подтвердите пароль" HorizontalAlignment="Left" Height="40" Margin="148,250,0,0" VerticalAlignment="Top"></Label>
<TextBox x:Name="TextBox3" HorizontalAlignment="Left" Height="33" Width="250" Margin="148,86,0,0" TextWrapping="Wrap" VerticalAlignment="Top"></TextBox>
<TextBox x:Name="TextBox4" HorizontalAlignment="Left" Height="33" Width="250" Margin="148,190,0,0" TextWrapping="Wrap" VerticalAlignment="Top"></TextBox>
<TextBox x:Name="TextBox5" HorizontalAlignment="Left" Height="33" Width="250" Margin="148,290,0,0" TextWrapping="Wrap" VerticalAlignment="Top"></TextBox>
<Button x:Name="button2" Content="Изменить пароль" HorizontalAlignment="Left" Height="45" Width="200" Margin="300,350,0,0" VerticalAlignment="Top" Click="button2_Click" >
</Button>

var user = (from x in db.Users
            where x.ID == usID
            select x).ToArray();
// если старый и новый пароли совпадают
if (user[0].password == TextBox3.Text)
{
    // если новый и подтверждение пароля совпадают
    if (TextBox4.Text == TextBox5.Text)
    {
        // меняем старый пароль на новый в базе данных
        user[0].password = TextBox4.Text;
        db.SaveChanges();
        MessageBox.Show("Пароль успешно изменён",
         "Уведомление", MessageBoxButton.OK, MessageBoxImage.Information);
        // сохраняем новую дату входа
        user[0].date = DateTime.Now;
        // обнуляем счётчик неправильных попыток входа
        user[0].count = 0;
        db.SaveChanges();
        // переходим на окно пользователя
        Window2 window1 = new Window2();
        window1.Show();
    }
    else
    {
        MessageBox.Show("Введённые пароли не совпадают!", "Пожалуйста проверьте ещё раз введённые данные",
        MessageBoxButton.OK, MessageBoxImage.Error);
    }
}
else
{
    MessageBox.Show("Старый пароль не совпадает!", "Пожалуйста проверьте ещё раз введённые данные",
    MessageBoxButton.OK, MessageBoxImage.Error);
}

// подключаемся к базе данных
hotelEntities db = new hotelEntities();
private int usID; // номер пользователя, который меняет пароль
public Window2((int usID) // передаём параметр
{
    InitializeComponent();
    this.usID = usID;

using Newtonsoft.Json.Linq;
using System.Net.Http;

private char[] forbiddensymbol = new char[] { '!', '@', '#', '$', '%', '^', '&', '*', '(', ')' };
        
private void check_Click(object sender, RoutedEventArgs e)
        {
            foreach (char symbol in forbiddensymbol)
            {
                if (FullNameTB.Text.Contains(symbol))
                {
                    ResultTB.Text = "Есть запрещенные символы!";
                    break;
                }
                else
                {
                    ResultTB.Text = "Всё хорошо";
                }
            }
        }
        private async void Get_Click(object sender, RoutedEventArgs e)
        {
            HttpClient client = new HttpClient();
            var response = await client.GetAsync("http://localhost:5048/WeatherForecast");
            var stringResponse = await response.Content.ReadAsStringAsync();
            JObject jobject = JObject.Parse(stringResponse);
            FullNameTB.Text = jobject["FullName"].ToString();
        }


